service: dynamodb-crud-api

provider:
  name: aws
  runtime: nodjs14.x
  stage: dev
  region: us-west-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}
  
  custom:
    postsTableName: posts-table-${self:provider.stage}
  
  plugins:
    - serverless-iam-roles-per-function

  functions:
    getPost:
      handler: api.getPost
      name: get-post
      memorySize: 128 #Mb
      timeout: 5 #seconds
      events:
        - http:
            path: post/{postId}
            method: GET
      # iamRoleStatements:
      #   - Effect: "Allow"
      #     Action:
      #       - "dynamodb:GetItem"
          # Resources: !GetAtt PostsTable.arn

    createPost:
      handler: api.createPost
      name: create-post
      memorySize: 128 #Mb
      timeout: 5 #seconds
      events:
        - http:
            path: post
            method: POST
      # iamRoleStatements:
      #   - Effect: "Allow"
      #     Action:
      #       - "dynamodb:PutItem"
          # Resources: !GetAtt PostsTable.arn

    updatePost:
      handler: api.updatePost
      name: update-post
      memorySize: 128 #Mb
      timeout: 5 #seconds
      events:
        - http:
            path: post/{postId}
            method: PUT
      # iamRoleStatements:
      #   - Effect: "Allow"
      #     Action:
      #       - "dynamodb:UpdateItem"
          # Resources: !GetAtt PostsTable.arn

    deletePost:
      handler: api.deletePost
      name: delete-post
      memorySize: 128 #Mb
      timeout: 5 #seconds
      events:
        - http:
            path: post/{postId}
            method: DELETE
      # iamRoleStatements:
      #   - Effect: "Allow"
      #     Action:
      #       - "dynamodb:DeleteItem"
          # Resources: !GetAtt PostsTable.arn

    getAllPosts:
      handler: api.getAllPosts
      name: get-all-posts
      memorySize: 128 #Mb
      timeout: 5 #seconds
      events:
        - http:
            path: get-all-posts
            method: GET 
      # iamRoleStatements:
      #   - Effect: "Allow"
      #     Action:
      #       - "dynamodb:Scan"
          # Resources: !GetAtt PostsTable.arn


  resources:
    Resources:
      PostsTable: 
        Type: AWS:DynamoDB::Table
        Properties:
        TableName: ${self:custom.postsTableName}
        AttributesDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH 
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1